http://acm.hrbeu.edu.cn/forums/index.php?showtopic=2940
问题描述:若在流网络的每条边加上两个限制条件，即low和up，low代表此边流量的下界，up代表此边的流量上界，求源点到汇点的最大流。
         对于这种问题有可能不存在可行流，所以解决此问题需要两个部分。第一部分判断是否存在满足条件的流。第二部分，若存在这样的流，则求出其最大值。

解决此问题的步骤如下：
1: 定义数据结构
   设cap(u,v) 代表从u到v的边的容量。
     up(u,v)  u到v的边的流量上界。
     low(u,v) u到v的边流量下界。
     st(u)    点u的所有出边的下界之和。
     ed(u)    点u的所有入边的下界之和。
     s 为源点，t 为汇点。
2：解决这个问题要引入一个附加网络，设原网络为G，附加网络为D，D包含G中的所有点
   构造新网络的方法如下：
   (1) 加入虚拟源点vs和虚拟汇点vt
   (2) 若边(u,v) 属于 G 那么这条边也属于 D， cap(u,v) = up(u,v) - low(u,v)
   (3) 对于G中的每一个点v， D 中加入边 (vs,v) ,cap(vs,v) = ed(v)
   (4) 对于G中的每一个点v， D 中加入边 (v,vt), cap(v,vt) = st(v)
   (5) 加入边(t,s), cap(t,s) = INF
   (6) tflow 为所有边的下界的和
3：求vs到vt的最大流，若最大流不等于tflow， 则不存在可行流，此问题无解。若相等，转入步骤4.
4: 在D中去掉所有和vs，vt相连的边，注意，这里面去掉边应是双向的都去掉，因为我们在更新网络时
   反向边的cap也会变化。去掉t到s的附加边，注意这也应该是双向的。其他的边不要改变，包括增广之后
   引起变化的cap。
5：在这个去掉边之后的图中接着运行求s到t的最大流算法。这样我们就知道了每条边上的流值。
   即我们知道现在图中每条边的流值，设为f(u,v), 那么我们要求的流值为flow(u,v)+low(u,v),接着流入到t的流的值也可以计算出来了。


http://www.cppblog.com/RyanWang/archive/2009/08/18/93672.html
有上下界的可行流

首先，对于无源汇的上下界可行流，常见做法是拆边：

然后转换成无下界的模型去做：

即添加源汇s, t，然后将任意一条边(u, v, l, c)（即u到v,下界l,上界c的边）拆成三条：
(u, v, 0, c - l), (s, v, 0, l), (u, t, 0, l)
其思想实际就是让所边的下界流量的分离出来，作为一条"必要边"(即如果有可行流，这些容量为下界的边一定是满的)，让其统一流入汇，然后让源点来提供这样的流量。
然后在这个网络上求最大流。看最大流是否 == 所有边的下界之和。

如果题目已经有了源汇，我们就先连一条(t, s, 0, 无限大)的边（显然这不影响流量平衡条件）。这样就转换成了前面所说的无源汇的情况，然后求之。
输出的结果就让相应原始边的流量加上他们的下界就可以了（即边(u, v, 0, c - l)的流量 + l）。

对于有源汇的上下界最大流 可以二分枚举(t,s)边的容量下界，判断是否存在可行流。
对于有源汇的上下界最小流 可以二分枚举(t,s)边的容量上界，判断是否存在可行流。




